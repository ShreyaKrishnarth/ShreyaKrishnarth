{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime as dt # The date module supplies classes for manuplating date and time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "cab_df= pd.read_csv(\"/Users/shreya/Downloads/Cab_Ride (2).csv\",encoding=\"utf-8\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>START_DATE</th>\n",
       "      <th>END_DATE</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>START</th>\n",
       "      <th>STOP</th>\n",
       "      <th>MILES</th>\n",
       "      <th>PURPOSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01-01-2016 21:11</td>\n",
       "      <td>01-01-2016 21:17</td>\n",
       "      <td>Business</td>\n",
       "      <td>Fort Pierce</td>\n",
       "      <td>Fort Pierce</td>\n",
       "      <td>5.1</td>\n",
       "      <td>Meal/Entertain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01-02-2016 01:25</td>\n",
       "      <td>01-02-2016 01:37</td>\n",
       "      <td>Business</td>\n",
       "      <td>Fort Pierce</td>\n",
       "      <td>Fort Pierce</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         START_DATE          END_DATE  CATEGORY        START         STOP  \\\n",
       "0  01-01-2016 21:11  01-01-2016 21:17  Business  Fort Pierce  Fort Pierce   \n",
       "1  01-02-2016 01:25  01-02-2016 01:37  Business  Fort Pierce  Fort Pierce   \n",
       "\n",
       "   MILES         PURPOSE  \n",
       "0    5.1  Meal/Entertain  \n",
       "1    5.0             NaN  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1117, 7)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "START_DATE     object\n",
       "END_DATE       object\n",
       "CATEGORY       object\n",
       "START          object\n",
       "STOP           object\n",
       "MILES         float64\n",
       "PURPOSE        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_time(column_name):\n",
    "    y=[]\n",
    "    for x in cab_df[column_name]:\n",
    "        y.append(dt.datetime.strptime(x, \"%m-%d-%Y %H:%M\"))\n",
    "    cab_df[column_name] = y    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data time Formats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "column_date=cab_df[['START_DATE','END_DATE']]\n",
    "for x in column_date:\n",
    "    convert_time(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of               START_DATE            END_DATE  CATEGORY             START  \\\n",
       "0    2016-01-01 21:11:00 2016-01-01 21:17:00  Business       Fort Pierce   \n",
       "1    2016-01-02 01:25:00 2016-01-02 01:37:00  Business       Fort Pierce   \n",
       "2    2016-01-02 20:25:00 2016-01-02 20:38:00  Business       Fort Pierce   \n",
       "3    2016-01-05 17:31:00 2016-01-05 17:45:00  Business       Fort Pierce   \n",
       "4    2016-01-06 14:42:00 2016-01-06 15:49:00  Business       Fort Pierce   \n",
       "...                  ...                 ...       ...               ...   \n",
       "1112 2016-12-31 01:07:00 2016-12-31 01:14:00  Business           Kar?chi   \n",
       "1113 2016-12-31 13:24:00 2016-12-31 13:42:00  Business           Kar?chi   \n",
       "1114 2016-12-31 15:03:00 2016-12-31 15:38:00  Business  Unknown Location   \n",
       "1115 2016-12-31 21:32:00 2016-12-31 21:50:00  Business        Katunayake   \n",
       "1116 2016-12-31 22:08:00 2016-12-31 23:51:00  Business           Gampaha   \n",
       "\n",
       "                  STOP  MILES          PURPOSE  \n",
       "0          Fort Pierce    5.1   Meal/Entertain  \n",
       "1          Fort Pierce    5.0              NaN  \n",
       "2          Fort Pierce    4.8  Errand/Supplies  \n",
       "3          Fort Pierce    4.7          Meeting  \n",
       "4      West Palm Beach   63.7   Customer Visit  \n",
       "...                ...    ...              ...  \n",
       "1112           Kar?chi    0.7          Meeting  \n",
       "1113  Unknown Location    3.9   Temporary Site  \n",
       "1114  Unknown Location   16.2          Meeting  \n",
       "1115           Gampaha    6.4   Temporary Site  \n",
       "1116         Ilukwatta   48.2   Temporary Site  \n",
       "\n",
       "[1117 rows x 7 columns]>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MILES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1117.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>10.631513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>21.894507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>10.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>310.300000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             MILES\n",
       "count  1117.000000\n",
       "mean     10.631513\n",
       "std      21.894507\n",
       "min       0.500000\n",
       "25%       2.900000\n",
       "50%       6.000000\n",
       "75%      10.400000\n",
       "max     310.300000"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "START_DATE      0\n",
       "END_DATE        0\n",
       "CATEGORY        0\n",
       "START           0\n",
       "STOP            0\n",
       "MILES           0\n",
       "PURPOSE       501\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing = cab_df.isnull().sum()\n",
    "missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>START_DATE</th>\n",
       "      <th>END_DATE</th>\n",
       "      <th>CATEGORY</th>\n",
       "      <th>START</th>\n",
       "      <th>STOP</th>\n",
       "      <th>MILES</th>\n",
       "      <th>PURPOSE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2016-06-28 23:34:00</td>\n",
       "      <td>2016-06-28 23:59:00</td>\n",
       "      <td>Business</td>\n",
       "      <td>Cary</td>\n",
       "      <td>Cary</td>\n",
       "      <td>9.9</td>\n",
       "      <td>Meeting</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           START_DATE            END_DATE  CATEGORY START  STOP  MILES  \\\n",
       "0 2016-06-28 23:34:00 2016-06-28 23:59:00  Business  Cary  Cary    9.9   \n",
       "\n",
       "   PURPOSE  \n",
       "0  Meeting  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate mode\n",
    "cab_df.mode(axis=0, numeric_only=False, dropna=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fill missing values by mode\n",
    "cab_df['PURPOSE'].fillna(\"Meeting\",inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot number of trip at each category\n",
    "x = cab_df['CATEGORY'].value_counts().plot(kind='bar')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Number of trips per month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "count = 0\n",
    "mt=[]\n",
    "while count < len(cab_df):\n",
    "    mt.append(cab_df['START_DATE'][count].month)\n",
    "    count = count+1\n",
    "cab_df['Month'] = mt    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = cab_df['Month'].value_counts()\n",
    "x.plot(kind='bar',figsize=(10,5),color='orange')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Number of trips per Month')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0 days 00:06:00\n",
       "1      0 days 00:12:00\n",
       "2      0 days 00:13:00\n",
       "3      0 days 00:14:00\n",
       "4      0 days 01:07:00\n",
       "             ...      \n",
       "1112   0 days 00:07:00\n",
       "1113   0 days 00:18:00\n",
       "1114   0 days 00:35:00\n",
       "1115   0 days 00:18:00\n",
       "1116   0 days 01:43:00\n",
       "Name: Duration_Minutes, Length: 1117, dtype: timedelta64[ns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate the duration of each trip in minutes\n",
    "\n",
    "cab_df['Duration_Minutes'] = cab_df['END_DATE'] - cab_df['START_DATE']\n",
    "cab_df['Duration_Minutes']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timedelta('0 days 00:06:00')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df['Duration_Minutes'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the time format in to minutes\n",
    "minutes=[]\n",
    "for x in cab_df['Duration_Minutes']:\n",
    "    minutes.append(x.seconds/60)\n",
    "    \n",
    "cab_df['Duration_Minutes'] = minutes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(cab_df['Duration_Minutes'],bins = 10,color='pink')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1117.000000\n",
       "mean       23.449418\n",
       "std        27.682733\n",
       "min         0.000000\n",
       "25%        10.000000\n",
       "50%        17.000000\n",
       "75%        28.000000\n",
       "max       336.000000\n",
       "Name: Duration_Minutes, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df['Duration_Minutes'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(cab_df['Duration_Minutes'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# see how many trips made by each purpose\n",
    "purpose_time = cab_df['PURPOSE'].value_counts()\n",
    "purpose_time.plot(kind='bar',figsize=(10,5),color='coral')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       51.000000\n",
       "1       25.000000\n",
       "2       22.153846\n",
       "3       20.142857\n",
       "4       57.044776\n",
       "          ...    \n",
       "1112     6.000000\n",
       "1113    13.000000\n",
       "1114    27.771429\n",
       "1115    21.333333\n",
       "1116    28.077670\n",
       "Name: Speed_KM, Length: 1117, dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate trip speed for each driver\n",
    "cab_df['Duration_hours'] = cab_df['Duration_Minutes'] / 60\n",
    "cab_df['Speed_KM'] = cab_df['MILES'] / cab_df['Duration_hours']\n",
    "cab_df['Speed_KM']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1117.000000\n",
       "mean             inf\n",
       "std              NaN\n",
       "min         3.917355\n",
       "25%        14.727273\n",
       "50%        20.923077\n",
       "75%        28.285714\n",
       "max              inf\n",
       "Name: Speed_KM, dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df['Speed_KM'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    False\n",
       "mean     False\n",
       "std      False\n",
       "min      False\n",
       "25%      False\n",
       "50%      False\n",
       "75%      False\n",
       "max      False\n",
       "Name: Speed_KM, dtype: bool"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cab_df['Speed_KM'].describe()== 'inf'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
